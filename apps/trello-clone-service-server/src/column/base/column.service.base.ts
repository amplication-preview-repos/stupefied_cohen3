/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Column as PrismaColumn,
  Card as PrismaCard,
  Board as PrismaBoard,
} from "@prisma/client";

export class ColumnServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ColumnCountArgs, "select">): Promise<number> {
    return this.prisma.column.count(args);
  }

  async columns(args: Prisma.ColumnFindManyArgs): Promise<PrismaColumn[]> {
    return this.prisma.column.findMany(args);
  }
  async column(
    args: Prisma.ColumnFindUniqueArgs
  ): Promise<PrismaColumn | null> {
    return this.prisma.column.findUnique(args);
  }
  async createColumn(args: Prisma.ColumnCreateArgs): Promise<PrismaColumn> {
    return this.prisma.column.create(args);
  }
  async updateColumn(args: Prisma.ColumnUpdateArgs): Promise<PrismaColumn> {
    return this.prisma.column.update(args);
  }
  async deleteColumn(args: Prisma.ColumnDeleteArgs): Promise<PrismaColumn> {
    return this.prisma.column.delete(args);
  }

  async findCards(
    parentId: string,
    args: Prisma.CardFindManyArgs
  ): Promise<PrismaCard[]> {
    return this.prisma.column
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .cards(args);
  }

  async getBoard(parentId: string): Promise<PrismaBoard | null> {
    return this.prisma.column
      .findUnique({
        where: { id: parentId },
      })
      .board();
  }
}
