/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Column } from "./Column";
import { ColumnCountArgs } from "./ColumnCountArgs";
import { ColumnFindManyArgs } from "./ColumnFindManyArgs";
import { ColumnFindUniqueArgs } from "./ColumnFindUniqueArgs";
import { CreateColumnArgs } from "./CreateColumnArgs";
import { UpdateColumnArgs } from "./UpdateColumnArgs";
import { DeleteColumnArgs } from "./DeleteColumnArgs";
import { CardFindManyArgs } from "../../card/base/CardFindManyArgs";
import { Card } from "../../card/base/Card";
import { Board } from "../../board/base/Board";
import { ColumnService } from "../column.service";
@graphql.Resolver(() => Column)
export class ColumnResolverBase {
  constructor(protected readonly service: ColumnService) {}

  async _columnsMeta(
    @graphql.Args() args: ColumnCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Column])
  async columns(@graphql.Args() args: ColumnFindManyArgs): Promise<Column[]> {
    return this.service.columns(args);
  }

  @graphql.Query(() => Column, { nullable: true })
  async column(
    @graphql.Args() args: ColumnFindUniqueArgs
  ): Promise<Column | null> {
    const result = await this.service.column(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Column)
  async createColumn(@graphql.Args() args: CreateColumnArgs): Promise<Column> {
    return await this.service.createColumn({
      ...args,
      data: {
        ...args.data,

        board: args.data.board
          ? {
              connect: args.data.board,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Column)
  async updateColumn(
    @graphql.Args() args: UpdateColumnArgs
  ): Promise<Column | null> {
    try {
      return await this.service.updateColumn({
        ...args,
        data: {
          ...args.data,

          board: args.data.board
            ? {
                connect: args.data.board,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Column)
  async deleteColumn(
    @graphql.Args() args: DeleteColumnArgs
  ): Promise<Column | null> {
    try {
      return await this.service.deleteColumn(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Card], { name: "cards" })
  async findCards(
    @graphql.Parent() parent: Column,
    @graphql.Args() args: CardFindManyArgs
  ): Promise<Card[]> {
    const results = await this.service.findCards(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Board, {
    nullable: true,
    name: "board",
  })
  async getBoard(@graphql.Parent() parent: Column): Promise<Board | null> {
    const result = await this.service.getBoard(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
