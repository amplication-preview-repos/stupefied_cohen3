/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Card } from "./Card";
import { CardCountArgs } from "./CardCountArgs";
import { CardFindManyArgs } from "./CardFindManyArgs";
import { CardFindUniqueArgs } from "./CardFindUniqueArgs";
import { CreateCardArgs } from "./CreateCardArgs";
import { UpdateCardArgs } from "./UpdateCardArgs";
import { DeleteCardArgs } from "./DeleteCardArgs";
import { Board } from "../../board/base/Board";
import { Column } from "../../column/base/Column";
import { CardService } from "../card.service";
@graphql.Resolver(() => Card)
export class CardResolverBase {
  constructor(protected readonly service: CardService) {}

  async _cardsMeta(
    @graphql.Args() args: CardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Card])
  async cards(@graphql.Args() args: CardFindManyArgs): Promise<Card[]> {
    return this.service.cards(args);
  }

  @graphql.Query(() => Card, { nullable: true })
  async card(@graphql.Args() args: CardFindUniqueArgs): Promise<Card | null> {
    const result = await this.service.card(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Card)
  async createCard(@graphql.Args() args: CreateCardArgs): Promise<Card> {
    return await this.service.createCard({
      ...args,
      data: {
        ...args.data,

        board: args.data.board
          ? {
              connect: args.data.board,
            }
          : undefined,

        column: args.data.column
          ? {
              connect: args.data.column,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Card)
  async updateCard(@graphql.Args() args: UpdateCardArgs): Promise<Card | null> {
    try {
      return await this.service.updateCard({
        ...args,
        data: {
          ...args.data,

          board: args.data.board
            ? {
                connect: args.data.board,
              }
            : undefined,

          column: args.data.column
            ? {
                connect: args.data.column,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Card)
  async deleteCard(@graphql.Args() args: DeleteCardArgs): Promise<Card | null> {
    try {
      return await this.service.deleteCard(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Board, {
    nullable: true,
    name: "board",
  })
  async getBoard(@graphql.Parent() parent: Card): Promise<Board | null> {
    const result = await this.service.getBoard(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Column, {
    nullable: true,
    name: "column",
  })
  async getColumn(@graphql.Parent() parent: Card): Promise<Column | null> {
    const result = await this.service.getColumn(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
